webpackJsonp([9,33],{2:function(n,e,t){"use strict";function r(n){return n&&n.__esModule?n:{default:n}}Object.defineProperty(e,"__esModule",{value:!0}),e.rdMark=void 0;var a=t(3),o=r(a);e.rdMark=o.default},3:function(n,e,t){"use strict";function r(n){return n&&n.__esModule?n:{default:n}}Object.defineProperty(e,"__esModule",{value:!0});var a=t(4),o=r(a);e.default={functional:!0,render:function(n,e){var t="",r=!0,a=!1,i=void 0;try{for(var d,c=(0,o.default)(e.children);!(r=(d=c.next()).done);r=!0){var s=d.value;t+=s.text}}catch(n){a=!0,i=n}finally{try{!r&&c.return&&c.return()}finally{if(a)throw i}}return n("div",{class:["marked"],domProps:{innerHTML:window.marked(t)}})}}},260:function(n,e,t){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=t(2);e.default={data:function(){return{code:{one:'<template>\n    <div class="container">\n        <rd-datepicker :date="datePicker"></rd-datepicker>\n    </div>\n</template>',two:'<!-- template -->\n<template>\n    <div class="container">\n        <router-view></router-view>\n        <!-- radon global components -->\n        <rd-modal></rd-modal>\n        <rd-notification></rd-notification>\n        <rd-loadingbar></rd-loadingbar>\n        <rd-preview></rd-preview>\n    </div>\n</template>',three:'<style src="radon-ui/dist/static/css/dist.css"></style>'}}},components:{rdMark:r.rdMark}}},623:function(n,e,t){var r,a;r=t(260);var o=t(678);a=r=r||{},"object"!=typeof r.default&&"function"!=typeof r.default||(a=r=r.default),"function"==typeof a&&(a=a.options),a.render=o.render,a.staticRenderFns=o.staticRenderFns,n.exports=r},678:function(n,e){n.exports={render:function(){var n=this,e=n.$createElement;return e("div",{staticClass:"ex-content"},[e("div",{staticClass:"ex-card"},[e("rd-mark",["\n# 安装\n\n## 使用 npm 安装\n\n推荐使用 npm 的方式进行开发，不仅可在开发环境轻松调试，也可放心地在生产环境打包部署使用，享受整个生态圈和工具链带来的诸多好处。\n可以通过 npm 直接安装到项目中，使用 import 或 require 进行引用。\n\n```\nnpm install radon-ui\n```\n\n### 基本组件的使用\n\n\n在根组件中引入 RadonUI 的样式文件\n\n```html\n"+n._s(n.code.three)+"\n```\n\n引入 `rdDatepicker` 日历组件并局部注册并定义日历组件的数据对象及配置\n\n```javascript\nimport { rdDatepicker } from 'radon-ui'\n\nexport default {\n    data () {\n        return {\n            datePicker: {\n                value: '',\n                options: {\n                    quickClose: true,\n                    format: 'YYYY/MM/DD'\n                }\n            }\n        }\n    },\n    components: {\n        rdDatepicker\n    }\n}\n```\n\n在模板中任意位置放置日历组件并使用 `v-bind` 语法将数据动态绑定 `date` 属性上。\n\n```html\n"+n._s(n.code.one)+"\n```\n\n\n### 全局组件的使用\n\n\n先在项目的入口文件中引入 RadonUI 的全局组件安装方法。\n\n```javascript\n// main.js\nimport Vue from 'vue'\nimport { RadonInstall } from 'radon-ui'\n\nVue.use(RadonInstall, {\n    Modal: true,\n    Notification: true,\n    LoadingBar: true,\n    Preview: true\n})\n```\n\n推荐在 Vue 的根实例中放置全局组件的位置\n\n```html\n"+n._s(n.code.two)+"\n```\n\n可以在任何组件中调用相应的全局组件的实例方法\n\n```javascript\n// any vue components\nmethods: {\n    someAction () {\n        // 生成系统通知\n        this.$Notification.success('编辑成功', '', 5000)\n    },\n    open () {\n        // 确认弹窗\n        this.$Modal.create(\n            '这里是标题',\n            '这里应该说点什么',\n            () => {\n                // confirm callback\n            },\n            () => {\n                // cancel callback\n            }\n        )\n    }\n}\n\n```\n        "])])])},staticRenderFns:[]}}});
//# sourceMappingURL=9.b8aa7137ed6c0cb232c5.js.map